<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNetOpenAuth.OAuth.Consumer.Fakes</name>
    </assembly>
    <members>
        <member name="T:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimOAuthConsumerMessageFactory">
            <summary>DotNetOpenAuth.OAuth.ChannelElements.OAuthConsumerMessageFactory 的填充码类型</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimOAuthConsumerMessageFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimOAuthConsumerMessageFactory.#ctor(DotNetOpenAuth.OAuth.ChannelElements.OAuthConsumerMessageFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimOAuthConsumerMessageFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimOAuthConsumerMessageFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimOAuthConsumerMessageFactory.Bind(DotNetOpenAuth.Messaging.IMessageFactory)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimOAuthConsumerMessageFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimOAuthConsumerMessageFactory.Constructor">
            <summary>设置 OAuthConsumerMessageFactory.OAuthConsumerMessageFactory() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimOAuthConsumerMessageFactory.GetNewRequestMessageMessageReceivingEndpointIDictionaryOfStringString">
            <summary>设置 OAuthConsumerMessageFactory.GetNewRequestMessage(MessageReceivingEndpoint recipient, IDictionary`2&lt;String,String&gt; fields) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimOAuthConsumerMessageFactory.GetNewResponseMessageIDirectedProtocolMessageIDictionaryOfStringString">
            <summary>设置 OAuthConsumerMessageFactory.GetNewResponseMessage(IDirectedProtocolMessage request, IDictionary`2&lt;String,String&gt; fields) 的 填充码</summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimOAuthConsumerMessageFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimOAuthConsumerMessageFactory.AllInstances.GetNewRequestMessageMessageReceivingEndpointIDictionaryOfStringString">
            <summary>设置 OAuthConsumerMessageFactory.GetNewRequestMessage(MessageReceivingEndpoint recipient, IDictionary`2&lt;String,String&gt; fields) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimOAuthConsumerMessageFactory.AllInstances.GetNewResponseMessageIDirectedProtocolMessageIDictionaryOfStringString">
            <summary>设置 OAuthConsumerMessageFactory.GetNewResponseMessage(IDirectedProtocolMessage request, IDictionary`2&lt;String,String&gt; fields) 的 填充码</summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ConsumerSigningBindingElement">
            <summary>DotNetOpenAuth.OAuth.ChannelElements.RsaSha1ConsumerSigningBindingElement 的填充码类型</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ConsumerSigningBindingElement.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ConsumerSigningBindingElement.#ctor(DotNetOpenAuth.OAuth.ChannelElements.RsaSha1ConsumerSigningBindingElement)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ConsumerSigningBindingElement.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ConsumerSigningBindingElement.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ConsumerSigningBindingElement.Bind(DotNetOpenAuth.Messaging.IChannelBindingElement)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ConsumerSigningBindingElement.Bind(DotNetOpenAuth.Messaging.ITamperProtectionChannelBindingElement)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ConsumerSigningBindingElement.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ConsumerSigningBindingElement.Clone">
            <summary>设置 RsaSha1ConsumerSigningBindingElement.Clone() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ConsumerSigningBindingElement.ConstructorX509Certificate2">
            <summary>设置 RsaSha1ConsumerSigningBindingElement.RsaSha1ConsumerSigningBindingElement(X509Certificate2 signingCertificate) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ConsumerSigningBindingElement.GetSignatureITamperResistantOAuthMessage">
            <summary>设置 RsaSha1ConsumerSigningBindingElement.GetSignature(ITamperResistantOAuthMessage message) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ConsumerSigningBindingElement.IsSignatureValidITamperResistantOAuthMessage">
            <summary>设置 RsaSha1ConsumerSigningBindingElement.IsSignatureValid(ITamperResistantOAuthMessage message) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ConsumerSigningBindingElement.SigningCertificateGet">
            <summary>设置 RsaSha1ConsumerSigningBindingElement.get_SigningCertificate() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ConsumerSigningBindingElement.SigningCertificateSetX509Certificate2">
            <summary>设置 RsaSha1ConsumerSigningBindingElement.set_SigningCertificate(X509Certificate2 value) 的 填充码</summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ConsumerSigningBindingElement.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ConsumerSigningBindingElement.AllInstances.Clone">
            <summary>设置 RsaSha1ConsumerSigningBindingElement.Clone() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ConsumerSigningBindingElement.AllInstances.GetSignatureITamperResistantOAuthMessage">
            <summary>设置 RsaSha1ConsumerSigningBindingElement.GetSignature(ITamperResistantOAuthMessage message) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ConsumerSigningBindingElement.AllInstances.IsSignatureValidITamperResistantOAuthMessage">
            <summary>设置 RsaSha1ConsumerSigningBindingElement.IsSignatureValid(ITamperResistantOAuthMessage message) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ConsumerSigningBindingElement.AllInstances.SigningCertificateGet">
            <summary>设置 RsaSha1ConsumerSigningBindingElement.get_SigningCertificate() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.ShimRsaSha1ConsumerSigningBindingElement.AllInstances.SigningCertificateSetX509Certificate2">
            <summary>设置 RsaSha1ConsumerSigningBindingElement.set_SigningCertificate(X509Certificate2 value) 的 填充码</summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIConsumerTokenManager">
            <summary>DotNetOpenAuth.OAuth.ChannelElements.IConsumerTokenManager 的存根类型</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIConsumerTokenManager.#ctor">
            <summary>初始化 type StubIConsumerTokenManager 的新实例</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIConsumerTokenManager.ConsumerKeyGet">
            <summary>设置 IConsumerTokenManager.get_ConsumerKey() 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIConsumerTokenManager.ConsumerSecretGet">
            <summary>设置 IConsumerTokenManager.get_ConsumerSecret() 的 stub</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIConsumerTokenManager.dnoaoa::DotNetOpenAuth#OAuth#ChannelElements#ITokenManager#ExpireRequestTokenAndStoreNewAccessToken(System.String,System.String,System.String,System.String)">
            <summary>设置 ITokenManager.ExpireRequestTokenAndStoreNewAccessToken(String consumerKey, String requestToken, String accessToken, String accessTokenSecret) 的 存根</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIConsumerTokenManager.dnoaoa::DotNetOpenAuth#OAuth#ChannelElements#ITokenManager#GetTokenSecret(System.String)">
            <summary>设置 ITokenManager.GetTokenSecret(String token) 的 存根</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIConsumerTokenManager.dnoaoa::DotNetOpenAuth#OAuth#ChannelElements#ITokenManager#GetTokenType(System.String)">
            <summary>设置 ITokenManager.GetTokenType(String token) 的 存根</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIConsumerTokenManager.dnoaoa::DotNetOpenAuth#OAuth#ChannelElements#ITokenManager#StoreNewRequestToken(DotNetOpenAuth.OAuth.Messages.UnauthorizedTokenRequest,DotNetOpenAuth.OAuth.Messages.ITokenSecretContainingMessage)">
            <summary>设置 ITokenManager.StoreNewRequestToken(UnauthorizedTokenRequest request, ITokenSecretContainingMessage response) 的 存根</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIConsumerTokenManager.ExpireRequestTokenAndStoreNewAccessTokenStringStringStringString">
            <summary>设置 ITokenManager.ExpireRequestTokenAndStoreNewAccessToken(String consumerKey, String requestToken, String accessToken, String accessTokenSecret) 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIConsumerTokenManager.GetTokenSecretString">
            <summary>设置 ITokenManager.GetTokenSecret(String token) 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIConsumerTokenManager.GetTokenTypeString">
            <summary>设置 ITokenManager.GetTokenType(String token) 的 stub</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIConsumerTokenManager.StoreNewRequestTokenUnauthorizedTokenRequestITokenSecretContainingMessage">
            <summary>设置 ITokenManager.StoreNewRequestToken(UnauthorizedTokenRequest request, ITokenSecretContainingMessage response) 的 stub</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIConsumerTokenManager.dnoaoac::DotNetOpenAuth#OAuth#ChannelElements#IConsumerTokenManager#ConsumerKey">
            <summary>设置 IConsumerTokenManager.get_ConsumerKey() 的 stub</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubIConsumerTokenManager.dnoaoac::DotNetOpenAuth#OAuth#ChannelElements#IConsumerTokenManager#ConsumerSecret">
            <summary>设置 IConsumerTokenManager.get_ConsumerSecret() 的 stub</summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubOAuthConsumerMessageFactory">
            <summary>DotNetOpenAuth.OAuth.ChannelElements.OAuthConsumerMessageFactory 的存根类型</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubOAuthConsumerMessageFactory.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubOAuthConsumerMessageFactory.GetNewRequestMessage(DotNetOpenAuth.Messaging.MessageReceivingEndpoint,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>设置 OAuthConsumerMessageFactory.GetNewRequestMessage(MessageReceivingEndpoint recipient, IDictionary`2&lt;String,String&gt; fields) 的 存根</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubOAuthConsumerMessageFactory.GetNewRequestMessageMessageReceivingEndpointIDictionaryOfStringString">
            <summary>设置 OAuthConsumerMessageFactory.GetNewRequestMessage(MessageReceivingEndpoint recipient, IDictionary`2&lt;String,String&gt; fields) 的 stub</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubOAuthConsumerMessageFactory.GetNewResponseMessage(DotNetOpenAuth.Messaging.IDirectedProtocolMessage,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>设置 OAuthConsumerMessageFactory.GetNewResponseMessage(IDirectedProtocolMessage request, IDictionary`2&lt;String,String&gt; fields) 的 存根</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubOAuthConsumerMessageFactory.GetNewResponseMessageIDirectedProtocolMessageIDictionaryOfStringString">
            <summary>设置 OAuthConsumerMessageFactory.GetNewResponseMessage(IDirectedProtocolMessage request, IDictionary`2&lt;String,String&gt; fields) 的 stub</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubOAuthConsumerMessageFactory.InitializeStub">
            <summary>初始化 type StubOAuthConsumerMessageFactory 的新实例</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubOAuthConsumerMessageFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubOAuthConsumerMessageFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubOAuthConsumerMessageFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubRsaSha1ConsumerSigningBindingElement">
            <summary>DotNetOpenAuth.OAuth.ChannelElements.RsaSha1ConsumerSigningBindingElement 的存根类型</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubRsaSha1ConsumerSigningBindingElement.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubRsaSha1ConsumerSigningBindingElement.Clone">
            <summary>设置 RsaSha1ConsumerSigningBindingElement.Clone() 的 存根</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubRsaSha1ConsumerSigningBindingElement.Clone01">
            <summary>设置 RsaSha1ConsumerSigningBindingElement.Clone() 的 stub</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubRsaSha1ConsumerSigningBindingElement.GetSignature(DotNetOpenAuth.OAuth.ChannelElements.ITamperResistantOAuthMessage)">
            <summary>设置 RsaSha1ConsumerSigningBindingElement.GetSignature(ITamperResistantOAuthMessage message) 的 存根</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubRsaSha1ConsumerSigningBindingElement.GetSignatureITamperResistantOAuthMessage">
            <summary>设置 RsaSha1ConsumerSigningBindingElement.GetSignature(ITamperResistantOAuthMessage message) 的 stub</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubRsaSha1ConsumerSigningBindingElement.InitializeStub">
            <summary>初始化 type StubRsaSha1ConsumerSigningBindingElement 的新实例</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubRsaSha1ConsumerSigningBindingElement.IsMessageApplicable(DotNetOpenAuth.OAuth.ChannelElements.ITamperResistantOAuthMessage)">
            <summary>设置 SigningBindingElementBase.IsMessageApplicable(ITamperResistantOAuthMessage message) 的 存根</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubRsaSha1ConsumerSigningBindingElement.IsMessageApplicableITamperResistantOAuthMessage">
            <summary>设置 SigningBindingElementBase.IsMessageApplicable(ITamperResistantOAuthMessage message) 的 stub</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubRsaSha1ConsumerSigningBindingElement.IsSignatureValid(DotNetOpenAuth.OAuth.ChannelElements.ITamperResistantOAuthMessage)">
            <summary>设置 RsaSha1ConsumerSigningBindingElement.IsSignatureValid(ITamperResistantOAuthMessage message) 的 存根</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubRsaSha1ConsumerSigningBindingElement.IsSignatureValidITamperResistantOAuthMessage">
            <summary>设置 RsaSha1ConsumerSigningBindingElement.IsSignatureValid(ITamperResistantOAuthMessage message) 的 stub</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubRsaSha1ConsumerSigningBindingElement.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubRsaSha1ConsumerSigningBindingElement.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.Fakes.StubRsaSha1ConsumerSigningBindingElement.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase">
            <summary>DotNetOpenAuth.OAuth.ConsumerBase 的填充码类型</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.#ctor(DotNetOpenAuth.OAuth.ConsumerBase)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.ChannelGet">
            <summary>设置 ConsumerBase.get_Channel() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.ConstructorServiceProviderDescriptionIConsumerTokenManager">
            <summary>设置 ConsumerBase.ConsumerBase(ServiceProviderDescription serviceDescription, IConsumerTokenManager tokenManager) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.ConsumerKeyGet">
            <summary>设置 ConsumerBase.get_ConsumerKey() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.CreateAuthorizingMessageMessageReceivingEndpointString">
            <summary>设置 ConsumerBase.CreateAuthorizingMessage(MessageReceivingEndpoint endpoint, String accessToken) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.Dispose">
            <summary>设置 ConsumerBase.Dispose() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.DisposeBoolean">
            <summary>设置 ConsumerBase.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.PrepareAuthorizedRequestAccessProtectedResourceRequest">
            <summary>设置 ConsumerBase.PrepareAuthorizedRequest(AccessProtectedResourceRequest message) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.PrepareAuthorizedRequestAndSendMessageReceivingEndpointString">
            <summary>设置 ConsumerBase.PrepareAuthorizedRequestAndSend(MessageReceivingEndpoint endpoint, String accessToken) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.PrepareAuthorizedRequestMessageReceivingEndpointString">
            <summary>设置 ConsumerBase.PrepareAuthorizedRequest(MessageReceivingEndpoint endpoint, String accessToken) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.PrepareAuthorizedRequestMessageReceivingEndpointStringIDictionaryOfStringString">
            <summary>设置 ConsumerBase.PrepareAuthorizedRequest(MessageReceivingEndpoint endpoint, String accessToken, IDictionary`2&lt;String,String&gt; extraData) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.PrepareAuthorizedRequestMessageReceivingEndpointStringIEnumerableOfMultipartPostPart">
            <summary>设置 ConsumerBase.PrepareAuthorizedRequest(MessageReceivingEndpoint endpoint, String accessToken, IEnumerable`1&lt;MultipartPostPart&gt; binaryData) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.PrepareRequestUserAuthorizationUriIDictionaryOfStringStringIDictionaryOfStringStringStringOut">
            <summary>设置 ConsumerBase.PrepareRequestUserAuthorization(Uri callback, IDictionary`2&lt;String,String&gt; requestParameters, IDictionary`2&lt;String,String&gt; redirectParameters, String&amp; requestToken) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.ProcessUserAuthorizationStringString">
            <summary>设置 ConsumerBase.ProcessUserAuthorization(String requestToken, String verifier) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.RequestNewClientAccountIDictionaryOfStringString">
            <summary>设置 ConsumerBase.RequestNewClientAccount(IDictionary`2&lt;String,String&gt; requestParameters) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.ServiceProviderGet">
            <summary>设置 ConsumerBase.get_ServiceProvider() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.ServiceProviderSetServiceProviderDescription">
            <summary>设置 ConsumerBase.set_ServiceProvider(ServiceProviderDescription value) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.TokenManagerGet">
            <summary>设置 ConsumerBase.get_TokenManager() 的 填充码</summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.AllInstances.ChannelGet">
            <summary>设置 ConsumerBase.get_Channel() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.AllInstances.ConsumerKeyGet">
            <summary>设置 ConsumerBase.get_ConsumerKey() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.AllInstances.CreateAuthorizingMessageMessageReceivingEndpointString">
            <summary>设置 ConsumerBase.CreateAuthorizingMessage(MessageReceivingEndpoint endpoint, String accessToken) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.AllInstances.Dispose">
            <summary>设置 ConsumerBase.Dispose() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.AllInstances.DisposeBoolean">
            <summary>设置 ConsumerBase.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.AllInstances.PrepareAuthorizedRequestAccessProtectedResourceRequest">
            <summary>设置 ConsumerBase.PrepareAuthorizedRequest(AccessProtectedResourceRequest message) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.AllInstances.PrepareAuthorizedRequestAndSendMessageReceivingEndpointString">
            <summary>设置 ConsumerBase.PrepareAuthorizedRequestAndSend(MessageReceivingEndpoint endpoint, String accessToken) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.AllInstances.PrepareAuthorizedRequestMessageReceivingEndpointString">
            <summary>设置 ConsumerBase.PrepareAuthorizedRequest(MessageReceivingEndpoint endpoint, String accessToken) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.AllInstances.PrepareAuthorizedRequestMessageReceivingEndpointStringIDictionaryOfStringString">
            <summary>设置 ConsumerBase.PrepareAuthorizedRequest(MessageReceivingEndpoint endpoint, String accessToken, IDictionary`2&lt;String,String&gt; extraData) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.AllInstances.PrepareAuthorizedRequestMessageReceivingEndpointStringIEnumerableOfMultipartPostPart">
            <summary>设置 ConsumerBase.PrepareAuthorizedRequest(MessageReceivingEndpoint endpoint, String accessToken, IEnumerable`1&lt;MultipartPostPart&gt; binaryData) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.AllInstances.PrepareRequestUserAuthorizationUriIDictionaryOfStringStringIDictionaryOfStringStringStringOut">
            <summary>设置 ConsumerBase.PrepareRequestUserAuthorization(Uri callback, IDictionary`2&lt;String,String&gt; requestParameters, IDictionary`2&lt;String,String&gt; redirectParameters, String&amp; requestToken) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.AllInstances.ProcessUserAuthorizationStringString">
            <summary>设置 ConsumerBase.ProcessUserAuthorization(String requestToken, String verifier) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.AllInstances.RequestNewClientAccountIDictionaryOfStringString">
            <summary>设置 ConsumerBase.RequestNewClientAccount(IDictionary`2&lt;String,String&gt; requestParameters) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.AllInstances.ServiceProviderGet">
            <summary>设置 ConsumerBase.get_ServiceProvider() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.AllInstances.ServiceProviderSetServiceProviderDescription">
            <summary>设置 ConsumerBase.set_ServiceProvider(ServiceProviderDescription value) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimConsumerBase.AllInstances.TokenManagerGet">
            <summary>设置 ConsumerBase.get_TokenManager() 的 填充码</summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.Fakes.ShimDesktopConsumer">
            <summary>DotNetOpenAuth.OAuth.DesktopConsumer 的填充码类型</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.ShimDesktopConsumer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.ShimDesktopConsumer.#ctor(DotNetOpenAuth.OAuth.DesktopConsumer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.ShimDesktopConsumer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.ShimDesktopConsumer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.ShimDesktopConsumer.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimDesktopConsumer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimDesktopConsumer.ConstructorServiceProviderDescriptionIConsumerTokenManager">
            <summary>设置 DesktopConsumer.DesktopConsumer(ServiceProviderDescription serviceDescription, IConsumerTokenManager tokenManager) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimDesktopConsumer.ProcessUserAuthorizationString">
            <summary>设置 DesktopConsumer.ProcessUserAuthorization(String requestToken) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimDesktopConsumer.ProcessUserAuthorizationStringString">
            <summary>设置 DesktopConsumer.ProcessUserAuthorization(String requestToken, String verifier) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimDesktopConsumer.RequestUserAuthorizationIDictionaryOfStringStringIDictionaryOfStringStringStringOut">
            <summary>设置 DesktopConsumer.RequestUserAuthorization(IDictionary`2&lt;String,String&gt; requestParameters, IDictionary`2&lt;String,String&gt; redirectParameters, String&amp; requestToken) 的 填充码</summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.Fakes.ShimDesktopConsumer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimDesktopConsumer.AllInstances.ProcessUserAuthorizationString">
            <summary>设置 DesktopConsumer.ProcessUserAuthorization(String requestToken) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimDesktopConsumer.AllInstances.ProcessUserAuthorizationStringString">
            <summary>设置 DesktopConsumer.ProcessUserAuthorization(String requestToken, String verifier) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimDesktopConsumer.AllInstances.RequestUserAuthorizationIDictionaryOfStringStringIDictionaryOfStringStringStringOut">
            <summary>设置 DesktopConsumer.RequestUserAuthorization(IDictionary`2&lt;String,String&gt; requestParameters, IDictionary`2&lt;String,String&gt; redirectParameters, String&amp; requestToken) 的 填充码</summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.Fakes.ShimWebConsumer">
            <summary>DotNetOpenAuth.OAuth.WebConsumer 的填充码类型</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.ShimWebConsumer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.ShimWebConsumer.#ctor(DotNetOpenAuth.OAuth.WebConsumer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.ShimWebConsumer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.ShimWebConsumer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.ShimWebConsumer.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimWebConsumer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimWebConsumer.ConstructorServiceProviderDescriptionIConsumerTokenManager">
            <summary>设置 WebConsumer.WebConsumer(ServiceProviderDescription serviceDescription, IConsumerTokenManager tokenManager) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimWebConsumer.PrepareRequestUserAuthorization">
            <summary>设置 WebConsumer.PrepareRequestUserAuthorization() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimWebConsumer.PrepareRequestUserAuthorizationUriIDictionaryOfStringStringIDictionaryOfStringString">
            <summary>设置 WebConsumer.PrepareRequestUserAuthorization(Uri callback, IDictionary`2&lt;String,String&gt; requestParameters, IDictionary`2&lt;String,String&gt; redirectParameters) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimWebConsumer.ProcessUserAuthorization">
            <summary>设置 WebConsumer.ProcessUserAuthorization() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimWebConsumer.ProcessUserAuthorizationHttpRequestBase">
            <summary>设置 WebConsumer.ProcessUserAuthorization(HttpRequestBase request) 的 填充码</summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.Fakes.ShimWebConsumer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimWebConsumer.AllInstances.PrepareRequestUserAuthorization">
            <summary>设置 WebConsumer.PrepareRequestUserAuthorization() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimWebConsumer.AllInstances.PrepareRequestUserAuthorizationUriIDictionaryOfStringStringIDictionaryOfStringString">
            <summary>设置 WebConsumer.PrepareRequestUserAuthorization(Uri callback, IDictionary`2&lt;String,String&gt; requestParameters, IDictionary`2&lt;String,String&gt; redirectParameters) 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimWebConsumer.AllInstances.ProcessUserAuthorization">
            <summary>设置 WebConsumer.ProcessUserAuthorization() 的 填充码</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.ShimWebConsumer.AllInstances.ProcessUserAuthorizationHttpRequestBase">
            <summary>设置 WebConsumer.ProcessUserAuthorization(HttpRequestBase request) 的 填充码</summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.Fakes.StubConsumerBase">
            <summary>DotNetOpenAuth.OAuth.ConsumerBase 的存根类型</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.StubConsumerBase.#ctor(DotNetOpenAuth.OAuth.ServiceProviderDescription,DotNetOpenAuth.OAuth.ChannelElements.IConsumerTokenManager)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.StubConsumerBase.Dispose(System.Boolean)">
            <summary>设置 ConsumerBase.Dispose(Boolean disposing) 的 存根</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.Fakes.StubConsumerBase.DisposeBoolean">
            <summary>设置 ConsumerBase.Dispose(Boolean disposing) 的 stub</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.StubConsumerBase.InitializeStub">
            <summary>初始化 type StubConsumerBase 的新实例</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.StubConsumerBase.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.StubConsumerBase.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.StubConsumerBase.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.Fakes.StubDesktopConsumer">
            <summary>DotNetOpenAuth.OAuth.DesktopConsumer 的存根类型</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.StubDesktopConsumer.#ctor(DotNetOpenAuth.OAuth.ServiceProviderDescription,DotNetOpenAuth.OAuth.ChannelElements.IConsumerTokenManager)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.StubDesktopConsumer.Dispose(System.Boolean)">
            <summary>设置 ConsumerBase.Dispose(Boolean disposing) 的 存根</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.Fakes.StubDesktopConsumer.DisposeBoolean">
            <summary>设置 ConsumerBase.Dispose(Boolean disposing) 的 stub</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.StubDesktopConsumer.InitializeStub">
            <summary>初始化 type StubDesktopConsumer 的新实例</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.StubDesktopConsumer.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.StubDesktopConsumer.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.StubDesktopConsumer.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.Fakes.StubWebConsumer">
            <summary>DotNetOpenAuth.OAuth.WebConsumer 的存根类型</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.StubWebConsumer.#ctor(DotNetOpenAuth.OAuth.ServiceProviderDescription,DotNetOpenAuth.OAuth.ChannelElements.IConsumerTokenManager)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.StubWebConsumer.Dispose(System.Boolean)">
            <summary>设置 ConsumerBase.Dispose(Boolean disposing) 的 存根</summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.Fakes.StubWebConsumer.DisposeBoolean">
            <summary>设置 ConsumerBase.Dispose(Boolean disposing) 的 stub</summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.Fakes.StubWebConsumer.InitializeStub">
            <summary>初始化 type StubWebConsumer 的新实例</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.StubWebConsumer.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.StubWebConsumer.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.Fakes.StubWebConsumer.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
    </members>
</doc>
